name: Re-build and re-deploy on test & production servers && trigger CCDH model refresh

on:
  workflow_dispatch:

jobs:
  rebuild_redeploy:
    runs-on: ubuntu-latest
    steps:
    - name: Run script on server
      # shell: bash  # Usage: this ensures that env variable usage syntax is correct; Disabled because: causes yaml file syntax error
      uses: appleboy/ssh-action@master  # https://github.com/appleboy/ssh-action
      with:
        host: terminology.ccdh.io
        username: docker
        password: ${{ secrets.DOCKER_USER_PASSWORD }}
        # key: ${{ secrets.KEY }}  # not needed
        # port: ${{ secrets.PORT }}  # default: 22
        # TODO: Is 'exit' necessary? I'm not 100% sure, but the last time I ran
        #   the action, it seemed to stay running indefinitely. - jef 2021/07/15
        # timeout: 30s  # timeout - timeout for ssh to remote host, default is 30s
        command_timeout: 60m  # command_timeout - timeout for ssh command, default is 10m
        # TODO: Since we run this in test and production, should we create a
        #   .sh script for this and re-use the code instead of have it copied
        #   2x here? - jef 2021/07/26
        script: |
          # 1. Test env
          # - Update codebase
          cd /opt/Projects/ccdh-terminology-service-test  # test env
          # git checkout master
          git pull
          # - Deploy
          cd docker
          # - Maybe don't include this command?
          # docker-compose -f docker-compose-test.yml down
          #WARNING: Found orphan containers (ccdh-api, neo4j) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.
          #Removing network docker_default
          #ERROR: error while removing network: network docker_default id 8d8e3e569664a33b9376538153185df01e9569368e48aaab5cbeaf20f50d4a20 has active endpoint
          docker stop neo4j-test redis-test ccdh-api-test; \
          docker-compose -f docker-compose-test.yml build; \
          docker-compose -f docker-compose-test.yml -p ccdh-test up -d; \
          docker exec ccdh-api-test python -m ccdh.importers.importer; \
          RESULT=$?; \
          if [ $RESULT -eq 0 ]; then
              # - It looks like this status check is entirely unnecessary.
              #    i=0; \
              #    server_status=down; \
              #    while [[ $i -lt 300 ]]
              #    do
              #        response="$(curl -s https://test.terminology.ccdh.io/models/)"
              #        # response="$(curl https://terminology.ccdh.io/models/)"
              #        if [[ $(echo $response) = [* ]]
              #        then
              #            server_status=up
              #            break
              #        else
              #            server_status=down
              #        fi
              #        ((i=i+1))
              #        printf "Server still down after $i seconds. Trying again.\n"
              #        sleep 1
              #    done; \
              #    printf "Server status ($i seconds elapsed):\n"; \
              #    echo $server_status

              # 2. Production env
              # - Update codebase
              cd /opt/Projects/ccdh-terminology-service  # prod env
              # git checkout master
              git pull
              # - Deploy
              cd docker
              docker-compose down
              docker-compose build ccdh-api
              docker-compose up -d
              # docker exec -it ccdh-api /bin/bash
              # python -m ccdh.importers.importer
              # python -m ccdh.integrations.crdc_h
              docker exec ccdh-api python -m ccdh.importers.importer
              docker exec ccdh-api-test python -m ccdh.integrations.crdc_h

              # 3. Exit
              exit 0
          else
              exit 1
          fi
